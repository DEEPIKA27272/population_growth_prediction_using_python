# -*- coding: utf-8 -*-
"""populationgrowth.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BeEu-ylXIajlH5QfkcwLUmjEZGv5Fd0a
"""

import pandas as pd

from google.colab import files


# Upload the file to the Colab environment
uploaded = files.upload()

"""## DATA PREPROCESSING"""





import io
data=pd.read_excel(io.BytesIO(uploaded['world_population-1.xlsx']))
data



#to display first 5 rows
data.head()

data.info()

data.describe()
# generates descriptive statistics of the numerical columns in a DataFrame

#checking rows and columns
data.shape

#checking missing values which is null values
data.isnull().sum()

# Define function to predict future population growth using compound interest formula
def predict_population_growth(Growth_Rate,Population_2022 , years):
    projected_population = Population_2022* ((1 + Growth_Rate)** years)
    return projected_population

# Apply prediction function to each row
years_to_predict = 1 # Predicting growth for 2023
data['Predicted_Growth'] = data.apply(lambda row:predict_population_growth(row['Growth_Rate'], row['Population_2022'], years_to_predict), axis=1)
# Format Predicted_Growth column to include commas as thousands separators
data['Predicted_Growth'] = data['Predicted_Growth'].apply(lambda x: "{:,.0f}".format(x))


# Print the DataFrame with predicted growth
print(data)





# Sort the DataFrame by 'Population_2022' column in descending order and select top 20 rows
top_20_population = data.sort_values(by='Population_2022', ascending=False).head(20)

# Print the top 20 rows with the highest population and their corresponding country names
print(top_20_population[['Country', 'Population_2022']])





import matplotlib.pyplot as plt

# Plotting the top 20 highest population growth of 2022
plt.figure(figsize=(10, 6))
plt.bar(top_20_population['Country'], top_20_population['Population_2022'], color='green')
plt.xlabel('Country')
plt.ylabel('Population growth of 2022')
plt.title('Top 20 Countries with Highest population growth of 2022')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()



# Sort the DataFrame by 'Predicted_Growth' column in descending order
data_sorted = data.copy()  # Create a copy of the DataFrame to avoid modifying the original data
data_sorted['Predicted_Growth'] = data_sorted['Predicted_Growth'].str.replace(',', '').astype(float)  # Remove commas and convert to float
data_sorted = data_sorted.sort_values(by='Predicted_Growth', ascending=False)

# Select the top 20 rows with highest predicted growth
top_20_predicted_growth = data_sorted.head(20)

# Print the top 20 highest predicted growth values
print("Top 20 Countries with Highest Predicted Growth:")
for index, row in top_20_predicted_growth.iterrows():
    print(f"{row['Country']}: {row['Predicted_Growth']:.0f}")  # Format to remove decimal places

import matplotlib.pyplot as plt

# Plotting the top 20 highest predicted growth values
plt.figure(figsize=(10, 6))
plt.bar(top_20_predicted_growth['Country'], top_20_predicted_growth['Predicted_Growth'], color='blue')
plt.xlabel('Country')
plt.ylabel('Predicted Growth')
plt.title('Top 20 Countries with Highest Predicted Growth')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()



# Remove commas from 'Predicted_Growth' column and convert it to numeric
data['Predicted_Growth'] = data['Predicted_Growth'].str.replace(',', '').astype(float)

# Sort the DataFrame by 'Predicted_Growth' column in descending order
data_sorted = data.sort_values(by='Predicted_Growth', ascending=False)

# Reassign the rank values based on the sorted order
data_sorted['Rank'] = range(1, len(data_sorted) + 1)

# Print the rearranged DataFrame with rank based on predicted growth
print(data_sorted[['Rank', 'Country', 'Predicted_Growth']])

# Create a new DataFrame with rearranged columns
up_dataset = data_sorted[['Rank', 'Country', 'Predicted_Growth']].copy()

# Print the new dataset
print(up_dataset)

excel_file_path = 'Output_column.xlsx'  # Provide the desired file path
up_dataset.to_excel(excel_file_path, index=False)
print(f"DataFrame exported to Excel file: {excel_file_path}")